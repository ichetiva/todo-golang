basePath: /api/v1
definitions:
  tasks.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  tasks.Task:
    properties:
      content:
        type: string
      done:
        type: boolean
      id:
        type: integer
    type: object
  tasks.TaskListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/tasks.Task'
        type: array
    type: object
  tasks.TaskResponse:
    properties:
      data:
        $ref: '#/definitions/tasks.Task'
    type: object
  users.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  users.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
      username:
        type: string
    type: object
  users.UserResponse:
    properties:
      data:
        $ref: '#/definitions/users.User'
    type: object
host: localhost:8080
info:
  contact: {}
  description: Simple todo API
  license:
    name: MIT
  title: Todo API
  version: "1.0"
paths:
  /task:
    get:
      consumes:
      - application/json
      description: Get task from database
      parameters:
      - description: Task identifer
        in: query
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.TaskResponse'
        "502":
          description: Get task failed
          schema:
            $ref: '#/definitions/tasks.ErrorResponse'
      summary: Get task
      tags:
      - tasks
  /task/all:
    get:
      consumes:
      - application/json
      description: Get all tasks from database
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.TaskListResponse'
        "502":
          description: Get all tasks failed
          schema:
            $ref: '#/definitions/tasks.ErrorResponse'
      summary: Get all tasks
      tags:
      - tasks
  /task/create:
    post:
      consumes:
      - application/json
      description: Add task to database with data which contains content
      parameters:
      - description: Task content
        in: body
        name: content
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.TaskResponse'
        "400":
          description: Non-valid data
          schema:
            $ref: '#/definitions/tasks.ErrorResponse'
        "502":
          description: Add task failed
          schema:
            $ref: '#/definitions/tasks.ErrorResponse'
      summary: Add task
      tags:
      - tasks
  /task/delete:
    delete:
      consumes:
      - application/json
      description: Delete task from database with data which contains id
      parameters:
      - description: Task identifer
        in: body
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.TaskResponse'
        "400":
          description: Non-valid data
          schema:
            $ref: '#/definitions/tasks.ErrorResponse'
        "502":
          description: Delete task failed
          schema:
            $ref: '#/definitions/tasks.ErrorResponse'
      summary: Delete task
      tags:
      - tasks
  /task/done:
    get:
      consumes:
      - application/json
      description: Get tasks which marked as done
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.TaskListResponse'
        "502":
          description: Get done tasks failed
          schema:
            $ref: '#/definitions/tasks.ErrorResponse'
      summary: Get done tasks
      tags:
      - tasks
    put:
      consumes:
      - application/json
      description: Mark task as done with data which contains id
      parameters:
      - description: Task indentifer
        in: body
        name: id
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.TaskResponse'
        "400":
          description: Non-valid data
          schema:
            $ref: '#/definitions/tasks.ErrorResponse'
        "502":
          description: Mark task as done failed
          schema:
            $ref: '#/definitions/tasks.ErrorResponse'
      summary: Done task
      tags:
      - tasks
  /task/notDone:
    get:
      consumes:
      - application/json
      description: Get tasks which not marked as done
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tasks.TaskListResponse'
        "502":
          description: Get not done tasks failed
          schema:
            $ref: '#/definitions/tasks.ErrorResponse'
      summary: Get not done tasks
      tags:
      - tasks
  /user/create:
    post:
      consumes:
      - application/json
      description: Create user to database with data which contains username and password
      parameters:
      - description: Your future username
        in: body
        name: username
        required: true
        schema:
          type: string
      - description: Your future password
        in: body
        name: password
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.UserResponse'
        "400":
          description: Non-valid password
          schema:
            $ref: '#/definitions/users.ErrorResponse'
        "502":
          description: Create user failed
          schema:
            $ref: '#/definitions/users.ErrorResponse'
      summary: Create user
      tags:
      - users
swagger: "2.0"
